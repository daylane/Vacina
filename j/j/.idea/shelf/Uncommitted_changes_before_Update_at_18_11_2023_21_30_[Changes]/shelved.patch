Index: Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/service/VacinaService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.edu.unime.daylanesilva.Vacina.service;\r\n\r\nimport br.edu.unime.daylanesilva.Vacina.dto.VacinaDTO;\r\nimport br.edu.unime.daylanesilva.Vacina.entity.Vacina;\r\nimport br.edu.unime.daylanesilva.Vacina.exception.BusinessException;\r\nimport br.edu.unime.daylanesilva.Vacina.repository.VacinaRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.validation.Valid;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport static java.lang.String.format;\r\n\r\n@Service\r\npublic class VacinaService {\r\n\r\n    @Autowired\r\n    private static VacinaRepository vacinaRepository;\r\n\r\n    public static List<Vacina> listarVacinas() {\r\n        return vacinaRepository.findAll();\r\n    }\r\n\r\n    public Vacina registrarVacina(@Valid Vacina vacina) {\r\n        if (vacina != null) {\r\n            vacinaRepository.save(vacina);\r\n        } else {\r\n            throw new IllegalArgumentException(\"A vacina não pode ser nula\");\r\n        }\r\n        return vacina;\r\n    }\r\n\r\n    public void deletarVacina(String id) {\r\n        Optional<Vacina> optionalVacina = findByid(id);\r\n        optionalVacina.ifPresent(value -> vacinaRepository.delete(value));\r\n    }\r\n\r\n    public Optional<Vacina> findByid(String id) {\r\n        if (id == null) {\r\n            throw new BusinessException(\"Id é obrigatório!\");\r\n        }\r\n        try {\r\n            return vacinaRepository.findById(id);\r\n        } catch (final Exception e) {\r\n            throw new BusinessException(format(\"Erro ao buscar vacina pelo ID = %s\", id), e);\r\n        }\r\n    }\r\n\r\n    public Vacina atualizarVacina(@Valid VacinaDTO novaVacina, String id) throws Exception {\r\n\r\n        Optional<Vacina> optionalVacina = findByid(id);\r\n        try {\r\n            if (optionalVacina.isPresent()) {\r\n                Vacina vacinaExistente = optionalVacina.get();\r\n\r\n                vacinaExistente.setNome(novaVacina.getNome());\r\n                vacinaExistente.setFabricante(novaVacina.getFabricante());\r\n                vacinaExistente.setLote(novaVacina.getLote());\r\n                vacinaExistente.setDataValidade(novaVacina.getDataValidade());\r\n                vacinaExistente.setNumeroDoses(novaVacina.getNumeroDoses());\r\n                vacinaExistente.setIntervaloMinimoEntreDoses(novaVacina.getIntervaloMinimoEntreDoses());\r\n\r\n                return vacinaRepository.save(vacinaExistente);\r\n            }\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Não foi possivel atualizar a vacina!\", e);\r\n\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public List<Vacina> buscarvacinaPorFabricante(String fabricante) {\r\n        if (fabricante == null) {\r\n            throw new BusinessException(\"Fabricante é obrigatório!\");\r\n        }\r\n        try {\r\n            return vacinaRepository.findByFabricante(fabricante);\r\n        } catch (final Exception e) {\r\n            throw new BusinessException(format(\"Erro ao buscar vacina pelo fabricante = %s\", fabricante), e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/service/VacinaService.java b/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/service/VacinaService.java
--- a/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/service/VacinaService.java	
+++ b/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/service/VacinaService.java	
@@ -51,25 +51,24 @@
     public Vacina atualizarVacina(@Valid VacinaDTO novaVacina, String id) throws Exception {
 
         Optional<Vacina> optionalVacina = findByid(id);
-        try {
-            if (optionalVacina.isPresent()) {
-                Vacina vacinaExistente = optionalVacina.get();
 
-                vacinaExistente.setNome(novaVacina.getNome());
-                vacinaExistente.setFabricante(novaVacina.getFabricante());
-                vacinaExistente.setLote(novaVacina.getLote());
-                vacinaExistente.setDataValidade(novaVacina.getDataValidade());
-                vacinaExistente.setNumeroDoses(novaVacina.getNumeroDoses());
-                vacinaExistente.setIntervaloMinimoEntreDoses(novaVacina.getIntervaloMinimoEntreDoses());
+        if (optionalPaciente.isPresent()) {
+            Paciente pacienteExistente = optionalPaciente.get();
 
-                return vacinaRepository.save(vacinaExistente);
-            }
-        } catch (Exception e) {
-            throw new Exception("Não foi possivel atualizar a vacina!", e);
+            pacienteExistente.setNome(pacienteDTO.getNome());
+            pacienteExistente.setSobrenome(pacienteDTO.getSobrenome());
+            pacienteExistente.setCpf(pacienteDTO.getCpf());
+            pacienteExistente.setDataNascimento(pacienteDTO.getDataNascimento());
+            pacienteExistente.setSexo(pacienteDTO.getSexo());
+            pacienteExistente.setContato(pacienteDTO.getContato());
 
-        }
-        return null;
+            return pacienteRepository.save(pacienteExistente);
+        } else {
+            return null;
+        }
     }
+
+    }
 
 
     public List<Vacina> buscarvacinaPorFabricante(String fabricante) {
Index: Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/VacinaApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.edu.unime.daylanesilva.Vacina;\r\n\r\nimport com.mongodb.client.MongoClients;\r\nimport com.mongodb.client.MongoClient;\r\n\r\nimport java.util.logging.Logger;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\r\n\r\n@SpringBootApplication\r\n@ComponentScan({ \"br.edu.unime.daylaneSilva.Vacina.Service\" })\r\n@EnableMongoRepositories(basePackages = \"br.edu.unime.daylaneSilva.Vacina.Repository\")\r\n@EntityScan(\"basePackages = br.edu.unime.daylaneSilva.vacina.Entity\")\r\npublic class VacinaApplication {\r\n\r\n\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tSpringApplication.run(VacinaApplication.class, args);\r\n\r\n\t}\r\n\r\n}\r\n
===================================================================
diff --git a/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/VacinaApplication.java b/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/VacinaApplication.java
--- a/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/VacinaApplication.java	
+++ b/Vacina/Vacina/src/main/java/br/edu/unime/daylanesilva/Vacina/VacinaApplication.java	
@@ -13,9 +13,6 @@
 import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
 
 @SpringBootApplication
-@ComponentScan({ "br.edu.unime.daylaneSilva.Vacina.Service" })
-@EnableMongoRepositories(basePackages = "br.edu.unime.daylaneSilva.Vacina.Repository")
-@EntityScan("basePackages = br.edu.unime.daylaneSilva.vacina.Entity")
 public class VacinaApplication {
 
 
